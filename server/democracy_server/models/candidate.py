# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from democracy_server.models.base_model_ import Model
from democracy_server import util


class Candidate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, description: str=None, votes: int=None):  # noqa: E501
        """Candidate - a model defined in Swagger

        :param id: The id of this Candidate.  # noqa: E501
        :type id: int
        :param name: The name of this Candidate.  # noqa: E501
        :type name: str
        :param description: The description of this Candidate.  # noqa: E501
        :type description: str
        :param votes: The votes of this Candidate.  # noqa: E501
        :type votes: int
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'description': str,
            'votes': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'votes': 'votes'
        }
        self._id = id
        self._name = name
        self._description = description
        self._votes = votes

    @classmethod
    def from_dict(cls, dikt) -> 'Candidate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Candidate of this Candidate.  # noqa: E501
        :rtype: Candidate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Candidate.


        :return: The id of this Candidate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Candidate.


        :param id: The id of this Candidate.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Candidate.


        :return: The name of this Candidate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Candidate.


        :param name: The name of this Candidate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Candidate.


        :return: The description of this Candidate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Candidate.


        :param description: The description of this Candidate.
        :type description: str
        """

        self._description = description

    @property
    def votes(self) -> int:
        """Gets the votes of this Candidate.


        :return: The votes of this Candidate.
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes: int):
        """Sets the votes of this Candidate.


        :param votes: The votes of this Candidate.
        :type votes: int
        """

        self._votes = votes
